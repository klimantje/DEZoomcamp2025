id: 04_postgres_taxi_dbt
namespace: zoomcamp
description: |
  The CSV Data used in the course: https://github.com/DataTalksClub/nyc-tlc-data/releases

inputs:
  - id: taxi
    type: MULTISELECT
    displayName: Select taxi type
    values: [yellow, green]
    defaults: [yellow, green]

  - id: year
    type: MULTISELECT
    displayName: Select year 
    values: ["2019", "2020"]
    defaults: ["2019", "2020"]

  - id: month
    type: MULTISELECT
    displayName: Select month
    values: ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"]
    defaults: ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"]

variables:
  file: "{{ parents[1].taskrun.value }}_tripdata_{{ parents[0].taskrun.value}}-{{taskrun.value}}.csv"
  staging_table: "public.{{parents[1].taskrun.value}}_tripdata_staging"
  table: "public.{{parents[1].taskrun.value}}_tripdata_dbt"
  data: "{{outputs.extract.outputFiles[parents[1].taskrun.value ~ '_tripdata_' ~ parents[0].taskrun.value ~ '-' ~ taskrun.value ~ '.csv']}}"
  
tasks:
  - id: 1_each_taxi
    type: io.kestra.plugin.core.flow.ForEach
    values: "{{ inputs.taxi }}"
    tasks:  
      - id: 2_each_year
        type: io.kestra.plugin.core.flow.ForEach
        values: "{{ inputs.year }}"
        tasks:
          - id: 3_each_month
            type: io.kestra.plugin.core.flow.ForEach
            values: "{{ inputs.month }}"
            tasks:
            - id: full_table_name
              type: io.kestra.plugin.core.log.Log
              message: |
                Taxi color: {{parents[1].taskrun.value }}
                Run year: {{parents[0].taskrun.value}}
                Run month: {{taskrun.value}}
            - id: set_label
              type: io.kestra.plugin.core.execution.Labels
              labels:
                file: "{{render(vars.file)}}"
                taxi: "{{ parents[1].taskrun.value }}"

            - id: extract
              type: io.kestra.plugin.scripts.shell.Commands
              outputFiles:
                - "*.csv"
              taskRunner:
                type: io.kestra.plugin.core.runner.Process
              commands:
                - wget -qO- https://github.com/DataTalksClub/nyc-tlc-data/releases/download/{{ parents[1].taskrun.value}}/{{render(vars.file)}}.gz | gunzip > {{render(vars.file)}}

            - id: if_yellow_taxi
              type: io.kestra.plugin.core.flow.If
              condition: "{{ parents[1].taskrun.value =='yellow' }}"
              then:
                - id: yellow_create_table
                  type: io.kestra.plugin.jdbc.postgresql.Queries
                  sql: |
                    CREATE TABLE IF NOT EXISTS public.yellow_tripdata_dbt (
                        unique_row_id          text,
                        filename               text,
                        VendorID               text,
                        tpep_pickup_datetime   timestamp,
                        tpep_dropoff_datetime  timestamp,
                        passenger_count        integer,
                        trip_distance          double precision,
                        RatecodeID             text,
                        store_and_fwd_flag     text,
                        PULocationID           text,
                        DOLocationID           text,
                        payment_type           integer,
                        fare_amount            double precision,
                        extra                  double precision,
                        mta_tax                double precision,
                        tip_amount             double precision,
                        tolls_amount           double precision,
                        improvement_surcharge  double precision,
                        total_amount           double precision,
                        congestion_surcharge   double precision
                    );

                - id: yellow_create_staging_table
                  type: io.kestra.plugin.jdbc.postgresql.Queries
                  sql: |
                    CREATE TABLE IF NOT EXISTS public.yellow_tripdata_staging (
                        unique_row_id          text,
                        filename               text,
                        VendorID               text,
                        tpep_pickup_datetime   timestamp,
                        tpep_dropoff_datetime  timestamp,
                        passenger_count        integer,
                        trip_distance          double precision,
                        RatecodeID             text,
                        store_and_fwd_flag     text,
                        PULocationID           text,
                        DOLocationID           text,
                        payment_type           integer,
                        fare_amount            double precision,
                        extra                  double precision,
                        mta_tax                double precision,
                        tip_amount             double precision,
                        tolls_amount           double precision,
                        improvement_surcharge  double precision,
                        total_amount           double precision,
                        congestion_surcharge   double precision
                    );

                - id: yellow_truncate_staging_table
                  type: io.kestra.plugin.jdbc.postgresql.Queries
                  sql: |
                    TRUNCATE TABLE public.yellow_tripdata_staging;

                - id: yellow_copy_in_to_staging_table
                  type: io.kestra.plugin.jdbc.postgresql.CopyIn
                  format: CSV
                  from: "{{outputs.extract.outputFiles[yellow ~ '_tripdata_' ~ parents[0].taskrun.value ~ '-' ~ taskrun.value ~ '.csv']}}"
                  table: "public.yellow_tripdata_staging"
                  header: true
                  columns: [VendorID,tpep_pickup_datetime,tpep_dropoff_datetime,passenger_count,trip_distance,RatecodeID,store_and_fwd_flag,PULocationID,DOLocationID,payment_type,fare_amount,extra,mta_tax,tip_amount,tolls_amount,improvement_surcharge,total_amount,congestion_surcharge]

                - id: yellow_add_unique_id_and_filename
                  type: io.kestra.plugin.jdbc.postgresql.Queries
                  sql: |
                    UPDATE public.yellow_tripdata_staging
                    SET 
                      unique_row_id = md5(
                        COALESCE(CAST(VendorID AS text), '') ||
                        COALESCE(CAST(tpep_pickup_datetime AS text), '') || 
                        COALESCE(CAST(tpep_dropoff_datetime AS text), '') || 
                        COALESCE(PULocationID, '') || 
                        COALESCE(DOLocationID, '') || 
                        COALESCE(CAST(fare_amount AS text), '') || 
                        COALESCE(CAST(trip_distance AS text), '')      
                      ),
                      filename = '{{render(vars.file)}}';

                - id: yellow_merge_data
                  type: io.kestra.plugin.jdbc.postgresql.Queries
                  sql: |
                    MERGE INTO public.yellow_tripdata_dbt AS T
                    USING public.yellow_tripdata_staging AS S
                    ON T.unique_row_id = S.unique_row_id
                    WHEN NOT MATCHED THEN
                      INSERT (
                        unique_row_id, filename, VendorID, tpep_pickup_datetime, tpep_dropoff_datetime,
                        passenger_count, trip_distance, RatecodeID, store_and_fwd_flag, PULocationID,
                        DOLocationID, payment_type, fare_amount, extra, mta_tax, tip_amount, tolls_amount,
                        improvement_surcharge, total_amount, congestion_surcharge
                      )
                      VALUES (
                        S.unique_row_id, S.filename, S.VendorID, S.tpep_pickup_datetime, S.tpep_dropoff_datetime,
                        S.passenger_count, S.trip_distance, S.RatecodeID, S.store_and_fwd_flag, S.PULocationID,
                        S.DOLocationID, S.payment_type, S.fare_amount, S.extra, S.mta_tax, S.tip_amount, S.tolls_amount,
                        S.improvement_surcharge, S.total_amount, S.congestion_surcharge
                      );

            - id: if_green_taxi
              type: io.kestra.plugin.core.flow.If
              condition: "{{ parents[1].taskrun.value == 'green'}}"
              then:
                - id: green_create_table
                  type: io.kestra.plugin.jdbc.postgresql.Queries
                  sql: |
                    CREATE TABLE IF NOT EXISTS public.green_tripdata_dbt (
                        unique_row_id          text,
                        filename               text,
                        VendorID               text,
                        lpep_pickup_datetime   timestamp,
                        lpep_dropoff_datetime  timestamp,
                        store_and_fwd_flag     text,
                        RatecodeID             text,
                        PULocationID           text,
                        DOLocationID           text,
                        passenger_count        integer,
                        trip_distance          double precision,
                        fare_amount            double precision,
                        extra                  double precision,
                        mta_tax                double precision,
                        tip_amount             double precision,
                        tolls_amount           double precision,
                        ehail_fee              double precision,
                        improvement_surcharge  double precision,
                        total_amount           double precision,
                        payment_type           integer,
                        trip_type              integer,
                        congestion_surcharge   double precision
                    );

                - id: green_create_staging_table
                  type: io.kestra.plugin.jdbc.postgresql.Queries
                  sql: |
                    CREATE TABLE IF NOT EXISTS public.green_tripdata_staging (
                        unique_row_id          text,
                        filename               text,
                        VendorID               text,
                        lpep_pickup_datetime   timestamp,
                        lpep_dropoff_datetime  timestamp,
                        store_and_fwd_flag     text,
                        RatecodeID             text,
                        PULocationID           text,
                        DOLocationID           text,
                        passenger_count        integer,
                        trip_distance          double precision,
                        fare_amount            double precision,
                        extra                  double precision,
                        mta_tax                double precision,
                        tip_amount             double precision,
                        tolls_amount           double precision,
                        ehail_fee              double precision,
                        improvement_surcharge  double precision,
                        total_amount           double precision,
                        payment_type           integer,
                        trip_type              integer,
                        congestion_surcharge   double precision
                    );

                - id: green_truncate_staging_table
                  type: io.kestra.plugin.jdbc.postgresql.Queries
                  sql: |
                    TRUNCATE TABLE public.green_tripdata_staging;

                - id: green_copy_in_to_staging_table
                  type: io.kestra.plugin.jdbc.postgresql.CopyIn
                  format: CSV
                  from: "{{outputs.extract.outputFiles[yellow ~ '_tripdata_' ~ parents[0].taskrun.value ~ '-' ~ taskrun.value ~ '.csv']}}"
                  table: "public.green_tripdata_staging"
                  header: true
                  columns: [VendorID,lpep_pickup_datetime,lpep_dropoff_datetime,store_and_fwd_flag,RatecodeID,PULocationID,DOLocationID,passenger_count,trip_distance,fare_amount,extra,mta_tax,tip_amount,tolls_amount,ehail_fee,improvement_surcharge,total_amount,payment_type,trip_type,congestion_surcharge]

                - id: green_add_unique_id_and_filename
                  type: io.kestra.plugin.jdbc.postgresql.Queries
                  sql: |
                    UPDATE public.green_tripdata_staging
                    SET 
                      unique_row_id = md5(
                        COALESCE(CAST(VendorID AS text), '') ||
                        COALESCE(CAST(lpep_pickup_datetime AS text), '') || 
                        COALESCE(CAST(lpep_dropoff_datetime AS text), '') || 
                        COALESCE(PULocationID, '') || 
                        COALESCE(DOLocationID, '') || 
                        COALESCE(CAST(fare_amount AS text), '') || 
                        COALESCE(CAST(trip_distance AS text), '')      
                      ),
                      filename = '{{render(vars.file)}}';

                - id: green_merge_data
                  type: io.kestra.plugin.jdbc.postgresql.Queries
                  sql: |
                    MERGE INTO public.green_tripdata_dbt AS T
                    USING public.green_tripdata_staging AS S
                    ON T.unique_row_id = S.unique_row_id
                    WHEN NOT MATCHED THEN
                      INSERT (
                        unique_row_id, filename, VendorID, lpep_pickup_datetime, lpep_dropoff_datetime,
                        store_and_fwd_flag, RatecodeID, PULocationID, DOLocationID, passenger_count,
                        trip_distance, fare_amount, extra, mta_tax, tip_amount, tolls_amount, ehail_fee,
                        improvement_surcharge, total_amount, payment_type, trip_type, congestion_surcharge
                      )
                      VALUES (
                        S.unique_row_id, S.filename, S.VendorID, S.lpep_pickup_datetime, S.lpep_dropoff_datetime,
                        S.store_and_fwd_flag, S.RatecodeID, S.PULocationID, S.DOLocationID, S.passenger_count,
                        S.trip_distance, S.fare_amount, S.extra, S.mta_tax, S.tip_amount, S.tolls_amount, S.ehail_fee,
                        S.improvement_surcharge, S.total_amount, S.payment_type, S.trip_type, S.congestion_surcharge
                      );
            
            - id: purge_files
              type: io.kestra.plugin.core.storage.PurgeCurrentExecutionFiles
              description: This will remove output files. If you'd like to explore Kestra outputs, disable it.

pluginDefaults:
  - type: io.kestra.plugin.jdbc.postgresql
    values:
      url: jdbc:postgresql://postgres:5432/postgres
      username: kestra
      password: k3str4